// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RiderGo.Infrastructure.Data;

#nullable disable

namespace RiderGo.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250918024252_create table rentals")]
    partial class createtablerentals
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RiderGo.Domain.Entities.Motorcycle", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "identificador");

                    b.Property<bool?>("IsFrom2024")
                        .HasColumnType("boolean")
                        .HasColumnName("is_from_2024");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("model")
                        .HasAnnotation("Relational:JsonPropertyName", "modelo");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("plate")
                        .HasAnnotation("Relational:JsonPropertyName", "plate");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year")
                        .HasAnnotation("Relational:JsonPropertyName", "ano");

                    b.HasKey("Id")
                        .HasName("pk_motorcycle");

                    b.HasIndex("Plate")
                        .IsUnique()
                        .HasDatabaseName("idx_motorcycle_plate");

                    b.ToTable("motorcycles", (string)null);
                });

            modelBuilder.Entity("RiderGo.Domain.Entities.Rental", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("DailyRate")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("daily_rate");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expected_end_date");

                    b.Property<string>("MotorcycleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("motorcycle_id");

                    b.Property<int>("Plan")
                        .HasColumnType("integer")
                        .HasColumnName("plan");

                    b.Property<string>("RiderId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rider_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.HasKey("Id")
                        .HasName("pk_rental");

                    b.HasIndex("MotorcycleId");

                    b.HasIndex("RiderId");

                    b.ToTable("rentals", (string)null);
                });

            modelBuilder.Entity("RiderGo.Domain.Entities.Rider", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateOnly>("Birth")
                        .HasColumnType("date")
                        .HasColumnName("birth");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("cnpj");

                    b.Property<string>("CnhImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("cnh_image_url");

                    b.Property<string>("CnhNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("cnh_number");

                    b.Property<string>("CnhType")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar")
                        .HasColumnName("cnh_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_rider");

                    b.HasIndex("CNPJ")
                        .IsUnique()
                        .HasDatabaseName("idx_rider_cnpj");

                    b.HasIndex("CnhNumber")
                        .IsUnique()
                        .HasDatabaseName("idx_rider_cnh_number");

                    b.ToTable("riders", (string)null);
                });

            modelBuilder.Entity("RiderGo.Domain.Entities.Rental", b =>
                {
                    b.HasOne("RiderGo.Domain.Entities.Motorcycle", "Motorcycle")
                        .WithMany("Rentals")
                        .HasForeignKey("MotorcycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rental_motorcycle");

                    b.HasOne("RiderGo.Domain.Entities.Rider", "Rider")
                        .WithMany("Rentals")
                        .HasForeignKey("RiderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rental_rider");

                    b.Navigation("Motorcycle");

                    b.Navigation("Rider");
                });

            modelBuilder.Entity("RiderGo.Domain.Entities.Motorcycle", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("RiderGo.Domain.Entities.Rider", b =>
                {
                    b.Navigation("Rentals");
                });
#pragma warning restore 612, 618
        }
    }
}
